
brief JavaScript timeline:

1995: JavaScript is born as LiveScript
1997: ECMAScript standard is established
1999: ES3 comes out and IE5 is all the rage
2000–2005: XMLHttpRequest, a.k.a. AJAX, gains popularity in app such as Outlook Web Access (2000) and Oddpost (2002), Gmail (2004) and Google Maps (2005).
2009: ES5 comes out (this is what most of us use now) with forEach, Object.keys, Object.create (specially for Douglas Crockford), and standard JSON
2015: ES6/ECMAScript2015 comes out; it has mostly syntactic sugar, because people weren’t able to agree on anything more ground breaking (ES7?)
2016: ES7
2017: ES8
2018: ES9
2019: ES10
2020: ES11 (In progress)
--------------------------------------------------------------
--->Functions in Javascript
- function is JavaScript returns undefined, unless otherwise specified. 

function say(message) {
    console.log(message);
}

let result = say('Hello');
console.log('Result:', result);

--->Example: Multiple return statements in the function to return different values based on conditions:

function compare(a, b) {
    if (a > b) {
        return -1;
    } else if (a < b) {
        return 1;
    }
    return 0;
}

--->Premature Return
The function immediately stops executing when the return statement is reached. Therefore, you can use the return statement without a value to exit the function prematurely, like this:

function say(message) {
    // show nothing if the message is empty
    if (message.length == 0) {
        return;
    }
    console.log(message);
}
say() 

-function will show nothing.The function can return a single value. If you want to return multiple values from a function, you need to pack these values in an array or an object.

--->arguments
Example: add() function that calculates the sum of any number of arguments.

function add() {
    let sum = 0;
    for (let i = 0; i < arguments.length; i++) {
        sum += arguments[i];
    }
    return sum;
}

Hence, you can pass any number of arguments to the add() function, like this:

console.log(add(1, 2)); // 3
console.log(add(1, 2, 3, 4, 5));

--->Function hoisting
In JavaScript, it is possible to use a function before it is declared. See the following example:

showMe(); // an hoisting example

function showMe(){
    console.log('an hoisting example');
}

- The function hoisting is a mechanism that the JavaScript engine physically moves the function declarations to the top of the code before executing it.

--->Storing functions in variables
- Functions are the first-class citizens in JavaScript. In other words, you can treat functions like values of other types.

The following declares the add() function and assigns the function name to the variable sum:

function add(a, b) {
    return a + b;
}

let sum = add;

- It means that we have two ways to execute the same function. We can call it normally as follows:

let result = add(10, 20);
- Or execute it like this:

let result = sum(10,20);

--->Passing a function to another function
- Because functions are values, you can pass a function as an argument into another function.

The following declares the average() function that takes three arguments. The third argument is a function:

function average(a, b, fn) {
    return fn(a, b) / 2;
}

Now, you can pass the sum function to the average() function as follows:

let result = average(10, 20, sum);

--->Returning functions from functions
- Since functions are values, you can return a function from another function.

The following compareBy() function returns a function that compares two objects by a provided property:

function compareBy(propName) {
    return function (a, b) {
	console.log(a[propName]+","+b[propName])
        let x = a[propName],
            y = b[propName];

        if (x > y) {
            return 1;
        } else if (x < y) {
            return -1
        } else {
            return 0;
        }
    }
}
- Suppose that you have an array of product objects where each product object has two properties: name and price.

let products = [
    {name: 'iPhone', price: 900},
    {name: 'Samsung Galaxy', price: 850},
    {name: 'Sony Xperia', price: 700}
];

- you can sort the product list based on the name by passing a function returned from the compareBy() function as follows:

console.log('Products sorted by name:');
products.sort(compareBy('name'));
console.table(products);

- Similarly, you can sort the product list by price:

// sort products by price
console.log('Products sorted by price:');
products.sort(compareBy('price'));
console.table(products);

--->Summary:
- Functions are the first-class citizens in JavaSript.
- You can pass functions to other functions as arguments, return them from other functions as values, and store them in variables.
--------------------------------------------------------------
--->JavaScript anonymous functions
- An anonymous function is a function without a name. An anonymous function is often not accessible after its initial creation.

The following shows an anonymous function that displays a message:

let show = function () {
    console.log('Anonymous function');
};

show();
- Note: Because we need to call the anonymous function later, we assign the function to the show variable

--->Using anonymous functions as arguments of other functions
- We often use anonymous functions as arguments of other functions. For example:

setTimeout(function () {
    console.log('Execute later after 1 second')
}, 1000);

Note: The setTimeout() function executes this anonymous function one second later.

--->Immediately invoked function execution

If you want to create a function and execute it immediately after declaration, you can use the anonymous function like this:

(function() {
    console.log('IIFE');
})();

- Example: sometimes, you may want to pass arguments into it, like this:

let person = {
    firstName: 'John',
    lastName: 'Doe'
};

(function () {
    console.log(`${person.firstName} ${person.lastName}`);
})(person);
--------------------------------------------------------------
--->Immediately Invoked Functions

Why IIFEs
- When you define a function, the JavaScript engine adds the function to the global object. See the following example:

function add(a,b) {
    return a + b;
}
On the Web Browsers, the add() function is added to the window object:

console.log(window.add);

Note: If you have many global variables and functions, the JavaScript engine will only release the memory allocated for them until when the global object loses the scope.As a result, the script may use the memory inefficiently. On top of that, having global variables and functions will likely cause the name collisions.
- One way to prevent the functions and variables from polluting the global object is to use immediately invoked function expressions.

-->Example: 

let add = (function(a,b){
    return a + b;
})(10, 20);

console.log(add);

-Note:By placing functions and variables inside an immediately invoked function expression, you can avoid polluting them to the global object:

(function() {
    var counter = 0;

    function add(a, b) {
        return a + b;
    }

    console.log(add(10,20)); // 30
}());

--->Suppose that you have a library called calculator.js with the following functions:

function add(a, b) {
    return a + b;
}

function mutiply(a, b) {
    return a * b;
}
And you load the calculator.js in an HTML document.

- Later on, you also want to load another JavaScript library called app.js to the same document:

<!DOCTYPE html>
<head>
  <meta charset="UTF-8">
  <title>JavaScript IIFE</title>
</head>
<body>
  <script src="calculator.js"></script>
  <script src="app.js"></script>
</body>
</html>

- The app.js also has the add() function:

function add() {
    return 'add';
}
- When you use the add() function in the HTML document, it returns the 'add' string instead of the sum of two numbers:

let result = add(10, 20);
console.log(result); // 'add'
- This is because the add() function in the app.js overrides the add() function in the calculator.js library.
- To fix this, you can apply IIFE in the calculator.js as follows:

const calculator = (function () {
    function add(a, b) {
        return a + b;
    }

    function multiply(a, b) {
        return a * b;
    }
    return {
        add: add,
        multiply: multiply
    }
})();

- The IIFE returns an object that contains the add and multiply methods that reference the add() and multiply() functions.

In the HTML document, you can use the calculator.js library as follows:

<!DOCTYPE html>
<head>
  <meta charset="UTF-8">
  <title>JavaScript IIFE</title>
</head>
<body>
  <script src="js/calculator.js"></script>
  <script src="js/app.js"></script>
  <script>
    let result = calculator.add(10, 20); // add in app.js
    console.log(result); // 30
    console.log(add()); // add in the app.js
  </script>
</body>
</html>
The calculator.add() called the add() function exported by the calculator.js while the second call to the add() function references the add() function in the app.

--------------------------------------------------------------
Template Literals
--------------------------------------------------------------
- ES6 has two new kinds of literals: template literals and tagged template literals. These two literals have similar names and look similar, but they are quite different. It is therefore important to distinguish:

Template literals (code): multi-line string literals that support interpolation
Tagged template literals (code): function calls
Web templates (data): HTML with blanks to be filled in

- Template literals are string literals that can stretch across multiple lines and include interpolated expressions (inserted via ${···}):

Example: Template literals

const firstName = 'Jane Doe';
console.log(`Hello ${firstName}!
How are you
today?`);


------------------------------------------------------------
-->Closures
------------------------------------------------------------
- Whenever a function is invoked, a new scope is created for that call. The local variable declared inside the function belong to that scope – they can only be accessed from that function
- Note:
- The function scope is created for a function call, not for the function itself
- Every function call creates a new scope

-->Example:When the function has finished the execution, the scope is usually destroyed. A simple example of such function is this:

function buildGreeting(name) { 
    var greeting = "Hello, " + name; 
    return greeting;
}

Note: The function buildGreeting(name) declares a local variable greeting and returns it. Every function call creates a new scope with a new local variable and. After the function is done executing, we have no way to refer to that scope again, so it’s garbage collected.
---> Example:

function buildGreeting(name) { 
    var greeting = "Hello, " + name + "!"; 
    var sayName = function() {
        var welcome = greeting + " Welcome!";
        console.log(greeting); 
    };
    return sayName; 
}

var sayMyName = buildGreeting("Sam");
Note: The function sayName() from this example is a closure.

- A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain.This is accomplished by creating a function inside a function. Of course, the outer function does not have access to the inner scope.
- After the execution of buildGreeting is done, the scope is not destroyed in this case. The sayMyName() function still has access to it, so it won’t be garbage collected. However, there is not other way of accessing data from the outer scope except the closure.
 
- The closure has three scope chains: 
(1)it has access to its own scope (variables defined between its curly brackets), 
(2)it has access to the outer function’s variables, and 
(3)it has access to the global variables.
- The inner function has access not only to the outer function’s variables, but also to the outer function’s parameters. 
Note: The inner function cannot call the outer function’s arguments object, however, even though it can call the outer function’s parameters directly.

Eample 1:
function showName (firstName, lastName) {
	var nameIntro = "Your name is";
	function makeFullName() {?        
		return nameIntro + firstName + " " + lastName;?    
	}
	return makeFullName();?
}?
showName("Michael", "Jackson"); 

Example 2:

function celebrityName(firstName) {
   var nameIntro = "This celebrity is";
   function lastName(theLastName) {
        return nameIntro + firstName + " " + theLastName;
    }
    return lastName;
}
var mjName = celebrityName("Michael"); 
mjName("Jackson");

